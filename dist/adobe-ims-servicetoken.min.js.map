{"version":3,"file":"adobe-ims-servicetoken.min.js","sources":["../src/ims.js"],"sourcesContent":["import murmurHash3 from \"murmurhash3js\";\n\nconst hash128 = murmurHash3.x64.hash128,\n\ttokens = new Map();\n\nexport async function token ({\n\turl = \"https://ims-na1.adobelogin.com/ims/token\",\n\tgrant_type = \"authorization_code\",\n\tclient_id = \"\",\n\tclient_secret = \"\",\n\tcode = \"\",\n\tjwt_token = \"\"\n} = {}) {\n\tconst key = hash128(`${url}|${client_id}|${grant_type}`);\n\tlet result;\n\n\tif (tokens.has(key) === false) {\n\t\tconst form = new FormData();\n\t\tlet res;\n\n\t\tif (grant_type.length > 0) {\n\t\t\tform.append(\"grant_type\", grant_type);\n\t\t}\n\n\t\tform.append(\"client_id\", client_id);\n\t\tform.append(\"client_secret\", client_secret);\n\n\t\tif (code.length > 0) {\n\t\t\tform.append(\"code\", code);\n\t\t}\n\n\t\tif (jwt_token.length > 0) {\n\t\t\tform.append(\"jwt_token\", jwt_token);\n\t\t}\n\n\t\ttry {\n\t\t\tres = await fetch(url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: form.getHeaders(),\n\t\t\t\tbody: form\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tres = {\n\t\t\t\tok: false,\n\t\t\t\tstatusText: err.message || err,\n\t\t\t\tjson: async () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\terror: res.statusText,\n\t\t\t\t\t\terror_description: err.message\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\ttext: async () => err.message || err\n\t\t\t};\n\t\t}\n\n\t\tconst data = await res.json();\n\n\t\tif (res.ok) {\n\t\t\ttokens.set(key, data.access_token);\n\t\t\tresult = structuredClone(data.access_token);\n\n\t\t\tif (data.expires_in !== void 0) {\n\t\t\t\tsetTimeout(() => tokens.delete(key), data.expires_in); // 24hr validity at time of dev\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`[${res.status}] ${data.error}: ${data.error_description}`);\n\t\t}\n\t} else {\n\t\tresult = structuredClone(tokens.get(key));\n\t}\n\n\treturn result;\n}\n"],"names":["murmurHash3","hash128","x64","tokens","Map","async","token","url","grant_type","client_id","client_secret","code","jwt_token","key","result","has","form","FormData","res","length","append","fetch","method","headers","getHeaders","body","err","ok","statusText","message","json","error","error_description","text","data","Error","status","set","access_token","structuredClone","expires_in","setTimeout","delete","get"],"mappings":";;;;OAEAA,MAAA,gBAAA,MAAMC,EAAUD,EAAYE,IAAID,QAC/BE,EAAS,IAAIC,IAEPC,eAAeC,GAAOC,IAC5BA,EAAM,2CAA0CC,WAChDA,EAAa,qBAAoBC,UACjCA,EAAY,GAAEC,cACdA,EAAgB,GAAEC,KAClBA,EAAO,GAAEC,UACTA,EAAY,IACT,IACH,MAAMC,EAAMZ,EAAQ,GAAGM,KAAOE,KAAaD,KAC3C,IAAIM,EAEJ,IAAwB,IAApBX,EAAOY,IAAIF,GAAgB,CAC9B,MAAMG,EAAO,IAAIC,SACjB,IAAIC,EAEAV,EAAWW,OAAS,GACvBH,EAAKI,OAAO,aAAcZ,GAG3BQ,EAAKI,OAAO,YAAaX,GACzBO,EAAKI,OAAO,gBAAiBV,GAEzBC,EAAKQ,OAAS,GACjBH,EAAKI,OAAO,OAAQT,GAGjBC,EAAUO,OAAS,GACtBH,EAAKI,OAAO,YAAaR,GAG1B,IACCM,QAAYG,MAAMd,EAAK,CACtBe,OAAQ,OACRC,QAASP,EAAKQ,aACdC,KAAMT,GAEP,CAAC,MAAOU,GACRR,EAAM,CACLS,IAAI,EACJC,WAAYF,EAAIG,SAAWH,EAC3BI,KAAMzB,UACE,CACN0B,MAAOb,EAAIU,WACXI,kBAAmBN,EAAIG,UAGzBI,KAAM5B,SAAYqB,EAAIG,SAAWH,EAElC,CAED,MAAMQ,QAAahB,EAAIY,OAEvB,IAAIZ,EAAIS,GAQP,MAAM,IAAIQ,MAAM,IAAIjB,EAAIkB,WAAWF,EAAKH,UAAUG,EAAKF,qBAPvD7B,EAAOkC,IAAIxB,EAAKqB,EAAKI,cACrBxB,EAASyB,gBAAgBL,EAAKI,mBAEN,IAApBJ,EAAKM,YACRC,YAAW,IAAMtC,EAAOuC,OAAO7B,IAAMqB,EAAKM,WAK9C,MACE1B,EAASyB,gBAAgBpC,EAAOwC,IAAI9B,IAGrC,OAAOC,CACR,QAAAR"}