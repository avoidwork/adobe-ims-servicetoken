{"version":3,"file":"adobe-ims-servicetoken.min.js","sources":["../src/ims.js"],"sourcesContent":["import FormDataImport from \"form-data\";\nimport fetchImport from \"node-fetch\";\nimport murmurHash3 from \"murmurhash3js\";\n\nconst hash128 = murmurHash3.x64.hash128,\n\ttokens = new Map(),\n\tclone = typeof structuredClone === \"function\" ? structuredClone : arg => JSON.parse(JSON.stringify(arg)),\n\tFormDataFacade = typeof FormData !== \"undefined\" ? FormData : FormDataImport,\n\tfetchFacade = typeof fetch !== \"undefined\" ? fetch : fetchImport;\n\nexport async function token ({\n\turl = \"https://ims-na1.adobelogin.com/ims/token\",\n\tgrant_type = \"authorization_code\",\n\tclient_id = \"\",\n\tclient_secret = \"\",\n\tcode = \"\",\n\tjwt_token = \"\"\n} = {}) {\n\tconst key = hash128(`${url}|${client_id}|${grant_type}`);\n\tlet result;\n\n\tif (tokens.has(key) === false) {\n\t\tconst form = new FormDataFacade();\n\t\tlet res;\n\n\t\tif (grant_type.length > 0) {\n\t\t\tform.append(\"grant_type\", grant_type);\n\t\t}\n\n\t\tform.append(\"client_id\", client_id);\n\t\tform.append(\"client_secret\", client_secret);\n\n\t\tif (code.length > 0) {\n\t\t\tform.append(\"code\", code);\n\t\t}\n\n\t\tif (jwt_token.length > 0) {\n\t\t\tform.append(\"jwt_token\", jwt_token);\n\t\t}\n\n\t\ttry {\n\t\t\tres = await fetchFacade(url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: form.getHeaders(),\n\t\t\t\tbody: form\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tres = {\n\t\t\t\tok: false,\n\t\t\t\tstatusText: err.message || err,\n\t\t\t\tjson: async () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\terror: res.statusText,\n\t\t\t\t\t\terror_description: err.message\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\ttext: async () => err.message || err\n\t\t\t};\n\t\t}\n\n\t\tconst data = await res.json();\n\n\t\tif (res.ok) {\n\t\t\ttokens.set(key, data.access_token);\n\t\t\tresult = clone(data.access_token);\n\n\t\t\tif (data.expires_in !== void 0) {\n\t\t\t\tsetTimeout(() => tokens.delete(key), data.expires_in); // 24hr validity at time of dev\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`[${res.status}] ${data.error}: ${data.error_description}`);\n\t\t}\n\t} else {\n\t\tresult = clone(tokens.get(key));\n\t}\n\n\treturn result;\n}\n"],"names":["FormDataImport","fetchImport","murmurHash3","hash128","x64","tokens","Map","clone","structuredClone","arg","JSON","parse","stringify","FormDataFacade","FormData","fetchFacade","fetch","async","token","url","grant_type","client_id","client_secret","code","jwt_token","key","result","has","form","res","length","append","method","headers","getHeaders","body","err","ok","statusText","message","json","error","error_description","text","data","Error","status","set","access_token","expires_in","setTimeout","delete","get"],"mappings":";;;;OAIAA,MAAA,mBAAAC,MAAA,oBAAAC,MAAA,gBAAA,MAAMC,EAAUD,EAAYE,IAAID,QAC/BE,EAAS,IAAIC,IACbC,EAAmC,mBAApBC,gBAAiCA,gBAAkBC,GAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IACnGI,EAAqC,oBAAbC,SAA2BA,SAAWd,EAC9De,EAA+B,oBAAVC,MAAwBA,MAAQf,EAE/CgB,eAAeC,GAAOC,IAC5BA,EAAM,2CAA0CC,WAChDA,EAAa,qBAAoBC,UACjCA,EAAY,GAAEC,cACdA,EAAgB,GAAEC,KAClBA,EAAO,GAAEC,UACTA,EAAY,IACT,IACH,MAAMC,EAAMtB,EAAQ,GAAGgB,KAAOE,KAAaD,KAC3C,IAAIM,EAEJ,IAAwB,IAApBrB,EAAOsB,IAAIF,GAAgB,CAC9B,MAAMG,EAAO,IAAIf,EACjB,IAAIgB,EAEAT,EAAWU,OAAS,GACvBF,EAAKG,OAAO,aAAcX,GAG3BQ,EAAKG,OAAO,YAAaV,GACzBO,EAAKG,OAAO,gBAAiBT,GAEzBC,EAAKO,OAAS,GACjBF,EAAKG,OAAO,OAAQR,GAGjBC,EAAUM,OAAS,GACtBF,EAAKG,OAAO,YAAaP,GAG1B,IACCK,QAAYd,EAAYI,EAAK,CAC5Ba,OAAQ,OACRC,QAASL,EAAKM,aACdC,KAAMP,GAEP,CAAC,MAAOQ,GACRP,EAAM,CACLQ,IAAI,EACJC,WAAYF,EAAIG,SAAWH,EAC3BI,KAAMvB,UACE,CACNwB,MAAOZ,EAAIS,WACXI,kBAAmBN,EAAIG,UAGzBI,KAAM1B,SAAYmB,EAAIG,SAAWH,EAElC,CAED,MAAMQ,QAAaf,EAAIW,OAEvB,IAAIX,EAAIQ,GAQP,MAAM,IAAIQ,MAAM,IAAIhB,EAAIiB,WAAWF,EAAKH,UAAUG,EAAKF,qBAPvDrC,EAAO0C,IAAItB,EAAKmB,EAAKI,cACrBtB,EAASnB,EAAMqC,EAAKI,mBAEI,IAApBJ,EAAKK,YACRC,YAAW,IAAM7C,EAAO8C,OAAO1B,IAAMmB,EAAKK,WAK9C,MACEvB,EAASnB,EAAMF,EAAO+C,IAAI3B,IAG3B,OAAOC,CACR,QAAAR"}